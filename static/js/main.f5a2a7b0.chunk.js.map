{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spaceing","justify","item","component","Card","xs","md","cx","card","total","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","infected","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","date","reportDate","fetchCountries","countries","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","pieChart","hoverBackgroundColor","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5a2a7b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react';\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport styles from './Cards.module.css'\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) =>{\n    if(!confirmed){\n        return 'Loading...';\n    }\n\n    return(\n        <div className={styles.container}>\n            <Grid container spaceing={3} justify=\"center\">\n            <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.total)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Total Infections</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={confirmed.value} duration={2.5} separator=',' />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of all cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Currently Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp  start={0} end={confirmed.value - recovered.value - deaths.value} duration={2.5} separator=',' />\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=','/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=','/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Deaths from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) =>{\n    let changeableUrl = url;\n    if(country){\n        changeableUrl = `${url}/countries/${country}`\n    }\n\n    try {\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\n        return { confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        \n    }\n}\n\nexport const fetchDailyData = async () =>{\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n        return modifiedData;\n        \n    } catch (error) {\n        \n    }\n}\n\nexport const fetchCountries = async () =>{\n    try {\n        const {data:{countries}} = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n\n    } catch (error) {\n        console.log(error);\n        \n    }\n}","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) =>{\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI= async () => {\n            setDailyData(await fetchDailyData());\n        }\n        \n        fetchAPI();\n    }, []);\n    const lineChart = (\n        dailyData.length\n        ? (\n            <Line\n                data={{\n                    labels: dailyData.map(({date}) => date),\n                    datasets: [{\n                        data: dailyData.map(({confirmed}) => confirmed),\n                        label: 'Total infections',\n                        borderColor: '#00c8c8',\n                        fill: true\n                    },{\n                        data: dailyData.map(({deaths}) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                        fill: true\n                    }],\n                }}\n        /> ) : null\n    );\n\n    // const barChart = (\n    //     confirmed\n    //     ?(\n    //         <Bar \n    //             data={{\n    //                 labels: ['Infected', 'Recovered', 'Deaths'],\n    //                 datasets: [{\n    //                     label: 'People',\n    //                     backgroundColor: ['rgba(0, 0, 225, 0.5', 'rgba(0, 225, 0, 0.5', 'rgba(225, 0, 0, 0.5'],\n    //                     data: [confirmed.value, recovered.value, deaths.value]\n    //                 }]\n    //             }} \n    //             options={{\n    //                 legend: {display: false},\n    //                 title: {display: true, text: `Current state in ${country}`},\n    //             }}\n    //         />\n    //     ): null\n    // );\n\n    const pieChart = (\n        confirmed\n        ?(\n            <Pie\n                data={{\n                    labels: ['Currently Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: ['rgba(0, 0, 225, 0.5', 'rgba(0, 225, 0, 0.5', 'rgba(225, 0, 0, 0.5'],\n                        data: [(confirmed.value - recovered.value - deaths.value), recovered.value, deaths.value],\n                        hoverBackgroundColor: ['rgba(0, 0, 225, 0.8', 'rgba(0, 225, 0 , 0.8', 'rgba(225, 0, 0, 0.8']\n                    }]\n                }}\n            />\n        ): null\n    )\n\n    return(\n        <div className={styles.container}>\n            {country ? pieChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries} from '../../api';\n\nconst CountryPicker = ({handleCountryChange}) =>{\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    \n    useEffect(()=>{\n        const fetchAPI = async() => {\n            setFetchedCountries(await fetchCountries());\n        }\n        \n        fetchAPI();\n    },[setFetchedCountries])\n\n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i)=><option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React from 'react';\n\nimport { Cards, Chart, CountryPicker } from './components'\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component{\n\n    state = {\n        data:{},\n        country: '',\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        \n        this.setState({data: fetchedData})\n    }\n\n    handleCountryChange = async (country) =>{\n        const fetchedData = await fetchData(country);\n        \n        this.setState({data: fetchedData, country:country})\n    }\n\n    render(){\n        const {data, country} = this.state;\n        return(\n            <div className={styles.container}>\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"total\":\"Cards_total__1ZCEX\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}